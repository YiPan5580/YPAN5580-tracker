//Needs to import pictures because parcel doesn't recognize pictures loaded from js
import sousVideImage from './pics/sous_vide.jpg';
import panFriedImage from './pics/pan_fried.jpg';
import grillImage from './pics/grill.jpg';
import deafultImage from './pics/default.jpg';

// Global variable to keep track of the currently selected image element
let selectedImage;  

//Generated by ai
document.addEventListener('DOMContentLoaded', function() {
    loadTableData();

    document.getElementById('addMethodButton').addEventListener('click', addMethod);
    document.getElementById('resetButton').addEventListener('click', resetTableData);
    
    const fileInput = document.getElementById('fileInput');
    fileInput.addEventListener('change', function() {
        updateImage(selectedImage, this);
    });

    const table = document.getElementById('methodsTable');
    table.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-button')) { // Ensure the click is on a delete button
            deleteRow(event.target);
        }
    });
});

function deleteRow(button) {
    try {
        const row = button.closest('tr');
        // Check if the row and its parent exist
        if (row && row.parentNode) { 
            // Remove the row
            row.parentNode.removeChild(row); 
            // Update local storage data
            saveTableData(); 
        } else {
            console.error('Failed to find the row to delete.');
        }
    } catch (error) {
        console.error('Error deleting row:', error);
    }
}

//Image uploader
function changeImage(event, imgElement) {
    // Prevents the click event from bubbling up
    event.stopPropagation();  
    // Store the image element that was clicked
    selectedImage = imgElement;  
    // Trigger the file input dialog
    document.getElementById('fileInput').click();  
}

function updateImage(imgElement, inputElement) {
    if (inputElement.files && inputElement.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            imgElement.src = e.target.result;
            // Save after image change
            saveTableData(); 
        };
        reader.readAsDataURL(inputElement.files[0]);
    }
}
//Ai generated adding new methods 
function addMethod() {
    const method = document.getElementById("methodInput").value;
    const lastUsed = document.getElementById("lastUsedInput").value;
    const timeSpent = document.getElementById("timeSpentInput").value;
    const achievements = document.getElementById("achievementsInput").value;

    if (!method || !lastUsed || !timeSpent || !achievements) {
        alert("Please fill in all fields before adding a method.");
        return;
    }

    const table = document.getElementById("methodsTable").getElementsByTagName('tbody')[0];
    const row = table.insertRow(-1);
    const pictureCell = row.insertCell(0);
    const img = document.createElement('img');
    img.src = deafultImage;
    img.alt = "Default Image";
    img.style.width = "100px";
    img.onclick = function(event) { changeImage(event, img); };
    pictureCell.appendChild(img);

    const methodCell = row.insertCell(1);
    const lastUsedCell = row.insertCell(2);
    const timeSpentCell = row.insertCell(3);
    const achievementsCell = row.insertCell(4);

    methodCell.textContent = method;
    lastUsedCell.textContent = lastUsed;
    timeSpentCell.textContent = timeSpent;
    achievementsCell.textContent = achievements;

    const deleteCell = row.insertCell(5);
    const deleteButton = document.createElement('button');
    deleteButton.textContent = 'Delete';
    // Add class for event delegation
    deleteButton.className = 'delete-button'; 
    deleteCell.appendChild(deleteButton);

    // Clear input fields after successful addition
    document.getElementById("methodInput").value = "";
    document.getElementById("lastUsedInput").value = "";
    document.getElementById("timeSpentInput").value = "";
    document.getElementById("achievementsInput").value = "";

    // Save the table data after adding the row
    saveTableData();
}
//Saves data in browser
function saveTableData() {
    const table = document.getElementById("methodsTable").getElementsByTagName('tbody')[0];
    // Array to hold data of each row
    const data = []; 
    for (let i = 0, row; row = table.rows[i]; i++) {
        const rowData = {
            method: row.cells[1].textContent,
            lastUsed: row.cells[2].textContent,
            timeSpent: row.cells[3].textContent,
            achievements: row.cells[4].textContent,
            imageUrl: row.cells[0].getElementsByTagName('img')[0].src
        };
        data.push(rowData);
    }
    localStorage.setItem('tableData', JSON.stringify(data));
}
//Load previous data
function loadTableData() {
    const data = localStorage.getItem('tableData');
    const table = document.getElementById("methodsTable").getElementsByTagName('tbody')[0];
    // Clear existing rows
    table.innerHTML = ''; 

    if (data) {
        console.log("Loading data...", data);
        const parsedData = JSON.parse(data);
        parsedData.forEach(addRowFromData);
    } else {
        // Initial rows if no data in local storage
        addMethodRow(sousVideImage, 'Sous Vide', '19/12/2023 19:23:40', '12H 30M', 'Master');
        addMethodRow(panFriedImage, 'Pan', '21/11/2023 13:49:21', '30M', 'Specialist');
        addMethodRow(grillImage, 'Grill', '13/01/2024 14:10', '1H', 'N.A.');
    }
}
//creates an object containing data for the new row
function addRowFromData(rowData) {
    const table = document.getElementById("methodsTable").getElementsByTagName('tbody')[0];
    const row = table.insertRow(-1);
    const imgCell = row.insertCell(0);
    const img = document.createElement('img');
    img.src = rowData.imageUrl;
    img.alt = "Uploaded Image";
    img.style.width = "100px";
    img.onclick = function(event) { changeImage(event, img); };
    imgCell.appendChild(img);

    const methodCell = row.insertCell(1);
    methodCell.textContent = rowData.method;

    const lastUsedCell = row.insertCell(2);
    lastUsedCell.textContent = rowData.lastUsed;

    const timeSpentCell = row.insertCell(3);
    timeSpentCell.textContent = rowData.timeSpent;

    const achievementsCell = row.insertCell(4);
    achievementsCell.textContent = rowData.achievements;

    const deleteCell = row.insertCell(5);
    const deleteButton = document.createElement('button');
    deleteButton.textContent = 'Delete';
    deleteButton.className = 'delete-button'; 
    deleteButton.onclick = function() { deleteRow(this); };
    deleteCell.appendChild(deleteButton);
}

//Creates the row for the data
function addMethodRow(imageSrc, method, lastUsed, timeSpent, achievements) {
    const table = document.getElementById("methodsTable").getElementsByTagName('tbody')[0];
    const row = table.insertRow(-1);
    const imgCell = row.insertCell(0);
    const img = document.createElement('img');
    img.src = imageSrc;
    img.alt = "Initial Image";
    img.style.width = "100px";
    img.onclick = function(event) { changeImage(event, img); };
    imgCell.appendChild(img);

    const methodCell = row.insertCell(1);
    const lastUsedCell = row.insertCell(2);
    const timeSpentCell = row.insertCell(3);
    const achievementsCell = row.insertCell(4);

    methodCell.textContent = method;
    lastUsedCell.textContent = lastUsed;
    timeSpentCell.textContent = timeSpent;
    achievementsCell.textContent = achievements;

    const deleteCell = row.insertCell(5);
    const deleteButton = document.createElement('button');
    deleteButton.textContent = 'Delete';
    deleteButton.className = 'delete-button'; 
    deleteButton.onclick = function() { deleteRow(this); };
    deleteCell.appendChild(deleteButton);
}
//clears the saved table data from the local storage and reloads the table data
function resetTableData() {
    localStorage.removeItem('tableData');
    loadTableData();
}
