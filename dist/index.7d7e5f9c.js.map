{"mappings":"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","sources":["<anon>","public/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n    loadTableData();\n    var table = document.getElementById(\"methodsTable\");\n    table.addEventListener(\"click\", function(event) {\n        if (event.target.classList.contains(\"delete-button\")) deleteRow(event.target);\n    });\n});\nvar selectedImage; // Global variable to keep track of the currently selected image element\nfunction changeImage(event, imgElement) {\n    event.stopPropagation(); // Prevents the click event from bubbling up\n    selectedImage = imgElement; // Store the image element that was clicked\n    document.getElementById(\"fileInput\").click(); // Trigger the file input dialog\n}\ndocument.getElementById(\"fileInput\").addEventListener(\"change\", function() {\n    console.log(\"File chosen\", this.files[0]); // Debug log\n    updateImage(selectedImage, this);\n});\nfunction updateImage(imgElement, inputElement) {\n    if (inputElement.files && inputElement.files[0]) {\n        var reader = new FileReader();\n        reader.onload = function(e) {\n            imgElement.src = e.target.result;\n            saveTableData(); // Save after image change\n        };\n        reader.readAsDataURL(inputElement.files[0]);\n    }\n}\nfunction addMethod() {\n    var method = document.getElementById(\"methodInput\").value;\n    var lastUsed = document.getElementById(\"lastUsedInput\").value;\n    var timeSpent = document.getElementById(\"timeSpentInput\").value;\n    var achievements = document.getElementById(\"achievementsInput\").value;\n    if (!method || !lastUsed || !timeSpent || !achievements) {\n        alert(\"Please fill in all fields before adding a method.\");\n        return;\n    }\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName(\"tbody\")[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, \"default.jpg\", method, lastUsed, timeSpent, achievements);\n    clearInputFields();\n    saveTableData();\n}\nfunction addMethodRow(imageUrl, method, lastUsed, timeSpent, achievements) {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName(\"tbody\")[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, imageUrl, method, lastUsed, timeSpent, achievements);\n}\nfunction addRowCells(row, imageUrl, method, lastUsed, timeSpent, achievements) {\n    var pictureCell = row.insertCell(0);\n    var img = document.createElement(\"img\");\n    img.src = imageUrl;\n    img.alt = \"Default Image\";\n    img.style.width = \"100px\";\n    img.onclick = function(event) {\n        changeImage(event, img);\n    };\n    pictureCell.appendChild(img);\n    var methodCell = row.insertCell(1);\n    var lastUsedCell = row.insertCell(2);\n    var timeSpentCell = row.insertCell(3);\n    var achievementsCell = row.insertCell(4);\n    methodCell.textContent = method;\n    lastUsedCell.textContent = lastUsed;\n    timeSpentCell.textContent = timeSpent;\n    achievementsCell.textContent = achievements;\n    var deleteCell = row.insertCell(5);\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.textContent = \"Delete\";\n    deleteButton.className = \"delete-button\"; // Add class for event delegation\n    deleteCell.appendChild(deleteButton);\n}\nfunction saveTableData() {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName(\"tbody\")[0];\n    var data = []; // Array to hold data of each row\n    for(var i = 0, row; row = table.rows[i]; i++){\n        var rowData = {\n            method: row.cells[1].textContent,\n            lastUsed: row.cells[2].textContent,\n            timeSpent: row.cells[3].textContent,\n            achievements: row.cells[4].textContent,\n            imageUrl: row.cells[0].getElementsByTagName(\"img\")[0].src\n        };\n        data.push(rowData);\n    }\n    localStorage.setItem(\"tableData\", JSON.stringify(data));\n}\nfunction loadTableData() {\n    var data = localStorage.getItem(\"tableData\");\n    if (data) {\n        console.log(\"Loading data...\", data);\n        data = JSON.parse(data);\n        var table = document.getElementById(\"methodsTable\").getElementsByTagName(\"tbody\")[0];\n        table.innerHTML = \"\"; // Clear existing rows\n        data.forEach(addRowFromData);\n    } else {\n        // Initial rows if no data in local storage\n        addMethodRow(\"pics/sous_vide.jpg\", \"Sous Vide\", \"19/12/2023 19:23:40\", \"12H 30M\", \"Master\");\n        addMethodRow(\"pics/pan_fried.jpg\", \"Pan\", \"21/11/2023 13:49:21\", \"30M\", \"Specialist\");\n        addMethodRow(\"pics/grill.jpg\", \"Grill\", \"13/01/2024 14:10\", \"1H\", \"N.A.\");\n    }\n}\nfunction addRowFromData(rowData) {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName(\"tbody\")[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, rowData.imageUrl, rowData.method, rowData.lastUsed, rowData.timeSpent, rowData.achievements);\n}\nfunction deleteRow(button) {\n    try {\n        var row = button.closest(\"tr\");\n        if (row) {\n            row.parentNode.removeChild(row); // Remove the row\n            saveTableData(); // Update local storage data\n        } else console.error(\"Failed to find the row to delete.\");\n    } catch (error) {\n        console.error(\"Error deleting row:\", error);\n    }\n}\nfunction clearInputFields() {\n    document.getElementById(\"methodInput\").value = \"\";\n    document.getElementById(\"lastUsedInput\").value = \"\";\n    document.getElementById(\"timeSpentInput\").value = \"\";\n    document.getElementById(\"achievementsInput\").value = \"\";\n}\nfunction resetTable() {\n    localStorage.removeItem(\"tableData\");\n    location.reload(); // Reload the page to reset the table\n}\n\n//# sourceMappingURL=index.7d7e5f9c.js.map\n","document.addEventListener('DOMContentLoaded', function() {\n    loadTableData();\n    \n    var table = document.getElementById('methodsTable');\n    table.addEventListener('click', function(event) {\n        if (event.target.classList.contains('delete-button')) { // Ensure the click is on a delete button\n            deleteRow(event.target);\n        }\n    });\n});\n\nvar selectedImage;  // Global variable to keep track of the currently selected image element\n\nfunction changeImage(event, imgElement) {\n    event.stopPropagation();  // Prevents the click event from bubbling up\n    selectedImage = imgElement;  // Store the image element that was clicked\n    document.getElementById('fileInput').click();  // Trigger the file input dialog\n}\n\ndocument.getElementById('fileInput').addEventListener('change', function() {\n    console.log(\"File chosen\", this.files[0]);  // Debug log\n    updateImage(selectedImage, this);\n});\n\nfunction updateImage(imgElement, inputElement) {\n    if (inputElement.files && inputElement.files[0]) {\n        var reader = new FileReader();\n        reader.onload = function(e) {\n            imgElement.src = e.target.result;\n            saveTableData(); // Save after image change\n        };\n        reader.readAsDataURL(inputElement.files[0]);\n    }\n}\n\nfunction addMethod() {\n    var method = document.getElementById(\"methodInput\").value;\n    var lastUsed = document.getElementById(\"lastUsedInput\").value;\n    var timeSpent = document.getElementById(\"timeSpentInput\").value;\n    var achievements = document.getElementById(\"achievementsInput\").value;\n\n    if (!method || !lastUsed || !timeSpent || !achievements) {\n        alert(\"Please fill in all fields before adding a method.\");\n        return;\n    }\n\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName('tbody')[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, \"default.jpg\", method, lastUsed, timeSpent, achievements);\n\n    clearInputFields();\n    saveTableData();\n}\n\nfunction addMethodRow(imageUrl, method, lastUsed, timeSpent, achievements) {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName('tbody')[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, imageUrl, method, lastUsed, timeSpent, achievements);\n}\n\nfunction addRowCells(row, imageUrl, method, lastUsed, timeSpent, achievements) {\n    var pictureCell = row.insertCell(0);\n    var img = document.createElement('img');\n    img.src = imageUrl;\n    img.alt = \"Default Image\";\n    img.style.width = \"100px\";\n    img.onclick = function(event) { changeImage(event, img); };\n    pictureCell.appendChild(img);\n\n    var methodCell = row.insertCell(1);\n    var lastUsedCell = row.insertCell(2);\n    var timeSpentCell = row.insertCell(3);\n    var achievementsCell = row.insertCell(4);\n\n    methodCell.textContent = method;\n    lastUsedCell.textContent = lastUsed;\n    timeSpentCell.textContent = timeSpent;\n    achievementsCell.textContent = achievements;\n\n    var deleteCell = row.insertCell(5);\n    var deleteButton = document.createElement('button');\n    deleteButton.textContent = 'Delete';\n    deleteButton.className = 'delete-button'; // Add class for event delegation\n    deleteCell.appendChild(deleteButton);\n}\n\nfunction saveTableData() {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName('tbody')[0];\n    var data = []; // Array to hold data of each row\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var rowData = {\n            method: row.cells[1].textContent,\n            lastUsed: row.cells[2].textContent,\n            timeSpent: row.cells[3].textContent,\n            achievements: row.cells[4].textContent,\n            imageUrl: row.cells[0].getElementsByTagName('img')[0].src\n        };\n        data.push(rowData);\n    }\n    localStorage.setItem('tableData', JSON.stringify(data));\n}\n\nfunction loadTableData() {\n    var data = localStorage.getItem('tableData');\n    if (data) {\n        console.log(\"Loading data...\", data);\n        data = JSON.parse(data);\n        var table = document.getElementById(\"methodsTable\").getElementsByTagName('tbody')[0];\n        table.innerHTML = ''; // Clear existing rows\n        data.forEach(addRowFromData);\n    } else {\n        // Initial rows if no data in local storage\n        addMethodRow('pics/sous_vide.jpg', 'Sous Vide', '19/12/2023 19:23:40', '12H 30M', 'Master');\n        addMethodRow('pics/pan_fried.jpg', 'Pan', '21/11/2023 13:49:21', '30M', 'Specialist');\n        addMethodRow('pics/grill.jpg', 'Grill', '13/01/2024 14:10', '1H', 'N.A.');\n    }\n}\n\nfunction addRowFromData(rowData) {\n    var table = document.getElementById(\"methodsTable\").getElementsByTagName('tbody')[0];\n    var row = table.insertRow(-1);\n    addRowCells(row, rowData.imageUrl, rowData.method, rowData.lastUsed, rowData.timeSpent, rowData.achievements);\n}\n\nfunction deleteRow(button) {\n    try {\n        var row = button.closest('tr');\n        if (row) {\n            row.parentNode.removeChild(row); // Remove the row\n            saveTableData(); // Update local storage data\n        } else {\n            console.error('Failed to find the row to delete.');\n        }\n    } catch (error) {\n        console.error('Error deleting row:', error);\n    }\n}\n\nfunction clearInputFields() {\n    document.getElementById(\"methodInput\").value = \"\";\n    document.getElementById(\"lastUsedInput\").value = \"\";\n    document.getElementById(\"timeSpentInput\").value = \"\";\n    document.getElementById(\"achievementsInput\").value = \"\";\n}\n\nfunction resetTable() {\n    localStorage.removeItem('tableData');\n    location.reload(); // Reload the page to reset the table\n}\n"],"names":["selectedImage","addMethodRow","imageUrl","method","lastUsed","timeSpent","achievements","addRowCells","table","document","getElementById","getElementsByTagName","insertRow","row","pictureCell","insertCell","img","createElement","src","alt","style","width","onclick","event","stopPropagation","click","appendChild","methodCell","lastUsedCell","timeSpentCell","achievementsCell","textContent","deleteCell","deleteButton","className","saveTableData","data","i","rows","rowData","cells","push","localStorage","setItem","JSON","stringify","addRowFromData","addEventListener","getItem","console","log","parse","innerHTML","forEach","target","classList","contains","deleteRow","button","closest","parentNode","removeChild","error","files","updateImage","imgElement","inputElement","reader","FileReader","onload","e","result","readAsDataURL"],"version":3,"file":"index.7d7e5f9c.js.map"}